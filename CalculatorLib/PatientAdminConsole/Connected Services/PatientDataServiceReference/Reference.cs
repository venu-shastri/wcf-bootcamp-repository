//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PatientAdminConsole.PatientDataServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PatientInfo", Namespace="http://schemas.datacontract.org/2004/07/DataModelsLib")]
    [System.SerializableAttribute()]
    public partial class PatientInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PatientAdminConsole.PatientDataServiceReference.Address AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MRNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PatientAdminConsole.PatientDataServiceReference.Address Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactNumber {
            get {
                return this.ContactNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactNumberField, value) != true)) {
                    this.ContactNumberField = value;
                    this.RaisePropertyChanged("ContactNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MRN {
            get {
                return this.MRNField;
            }
            set {
                if ((object.ReferenceEquals(this.MRNField, value) != true)) {
                    this.MRNField = value;
                    this.RaisePropertyChanged("MRN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Address", Namespace="http://schemas.datacontract.org/2004/07/DataModelsLib")]
    [System.SerializableAttribute()]
    public partial class Address : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PinCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreetField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PinCode {
            get {
                return this.PinCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PinCodeField, value) != true)) {
                    this.PinCodeField = value;
                    this.RaisePropertyChanged("PinCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Street {
            get {
                return this.StreetField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetField, value) != true)) {
                    this.StreetField = value;
                    this.RaisePropertyChanged("Street");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PatientDataServiceReference.IPatientDataService")]
    public interface IPatientDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/GetAllPatients", ReplyAction="http://tempuri.org/IPatientDataService/GetAllPatientsResponse")]
        PatientAdminConsole.PatientDataServiceReference.PatientInfo[] GetAllPatients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/GetAllPatients", ReplyAction="http://tempuri.org/IPatientDataService/GetAllPatientsResponse")]
        System.Threading.Tasks.Task<PatientAdminConsole.PatientDataServiceReference.PatientInfo[]> GetAllPatientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/AddNewPatient", ReplyAction="http://tempuri.org/IPatientDataService/AddNewPatientResponse")]
        string AddNewPatient(PatientAdminConsole.PatientDataServiceReference.PatientInfo newPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/AddNewPatient", ReplyAction="http://tempuri.org/IPatientDataService/AddNewPatientResponse")]
        System.Threading.Tasks.Task<string> AddNewPatientAsync(PatientAdminConsole.PatientDataServiceReference.PatientInfo newPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/RemovePatient", ReplyAction="http://tempuri.org/IPatientDataService/RemovePatientResponse")]
        bool RemovePatient(string mrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/RemovePatient", ReplyAction="http://tempuri.org/IPatientDataService/RemovePatientResponse")]
        System.Threading.Tasks.Task<bool> RemovePatientAsync(string mrn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/UpdatePatient", ReplyAction="http://tempuri.org/IPatientDataService/UpdatePatientResponse")]
        bool UpdatePatient(string mrn, PatientAdminConsole.PatientDataServiceReference.PatientInfo updatedState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientDataService/UpdatePatient", ReplyAction="http://tempuri.org/IPatientDataService/UpdatePatientResponse")]
        System.Threading.Tasks.Task<bool> UpdatePatientAsync(string mrn, PatientAdminConsole.PatientDataServiceReference.PatientInfo updatedState);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPatientDataServiceChannel : PatientAdminConsole.PatientDataServiceReference.IPatientDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PatientDataServiceClient : System.ServiceModel.ClientBase<PatientAdminConsole.PatientDataServiceReference.IPatientDataService>, PatientAdminConsole.PatientDataServiceReference.IPatientDataService {
        
        public PatientDataServiceClient() {
        }
        
        public PatientDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PatientDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PatientDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PatientDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PatientAdminConsole.PatientDataServiceReference.PatientInfo[] GetAllPatients() {
            return base.Channel.GetAllPatients();
        }
        
        public System.Threading.Tasks.Task<PatientAdminConsole.PatientDataServiceReference.PatientInfo[]> GetAllPatientsAsync() {
            return base.Channel.GetAllPatientsAsync();
        }
        
        public string AddNewPatient(PatientAdminConsole.PatientDataServiceReference.PatientInfo newPatient) {
            return base.Channel.AddNewPatient(newPatient);
        }
        
        public System.Threading.Tasks.Task<string> AddNewPatientAsync(PatientAdminConsole.PatientDataServiceReference.PatientInfo newPatient) {
            return base.Channel.AddNewPatientAsync(newPatient);
        }
        
        public bool RemovePatient(string mrn) {
            return base.Channel.RemovePatient(mrn);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePatientAsync(string mrn) {
            return base.Channel.RemovePatientAsync(mrn);
        }
        
        public bool UpdatePatient(string mrn, PatientAdminConsole.PatientDataServiceReference.PatientInfo updatedState) {
            return base.Channel.UpdatePatient(mrn, updatedState);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePatientAsync(string mrn, PatientAdminConsole.PatientDataServiceReference.PatientInfo updatedState) {
            return base.Channel.UpdatePatientAsync(mrn, updatedState);
        }
    }
}
